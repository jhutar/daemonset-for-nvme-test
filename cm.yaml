apiVersion: v1
kind: ConfigMap
metadata:
  name: nvme-storage-configurator
  namespace: nvme-storage-config
data:
  configure.sh: |
    #!/usr/bin/env bash

    # Enable debugging
    set -eux

    if [ -f /host-etc-systemd-dir/nvme-init-done ]; then
        echo 'NVMe init already done'
        exit 0
    fi

    cp -f /scripts/configuration.sh /host-usr-local-bin/configuration.sh
    chmod 0755 /host-usr-local-bin/configuration.sh

    cp -f /scripts/nvme-storage.service /host-etc-systemd-dir/nvme-storage.service
    chmod 0644 /host-etc-systemd-dir/nvme-storage.service

    nsenter -t 1 -m -u -i -n -p -- systemctl daemon-reload
    nsenter -t 1 -m -u -i -n -p -- systemctl enable nvme-storage.service
    touch /host-etc-systemd-dir/nvme-init-done
    nsenter -t 1 -m -u -i -n -p -- systemctl reboot


  configuration.sh: |
    #!/usr/bin/env bash

    # Enable debugging
    set -eux

    DEVICE="$( ls /dev/disk/by-id/nvme-Amazon_EC2_NVMe_Instance_Storage_* | sort | head -n1 )"
    echo "Going to use device $DEVICE"

    export MOUNT_POINT="/var/home/nvme"
    export TARGET_DIR="/var/lib"
    export FSTYPE="xfs"

    mkdir -p ${MOUNT_POINT}

    if lsblk -no FSTYPE "$DEVICE" | grep -qE '\S'; then
        echo "File system already exists on $DEVICE."
    else
        echo "No file system found on $DEVICE. Creating XFS filesystem..."
        mkfs -t "$FSTYPE" "$DEVICE"
    fi

    if ! grep -q "$DEVICE $MOUNT_POINT" /etc/fstab; then
        echo "$DEVICE $MOUNT_POINT $FSTYPE defaults 0 0" >> /etc/fstab
    fi

    mkdir -p ${MOUNT_POINT}/var-lib-kubelet-pods
    mount --bind /var/home/nvme/var-lib-kubelet-pods ${TARGET_DIR}/kubelet/pods

    mkdir -p ${MOUNT_POINT}/var-lib-containers
    mount --bind /var/home/nvme/var-lib-containers ${TARGET_DIR}/containers

    restorecon -R -v -F /var/lib/kubelet/pods /var/lib/containers

    echo "Filesystem setup and mounting complete."

  nvme-storage.service: |
    [Unit]
    Description=Custom Service for NVMe Storage
    DefaultDependencies=no
    Before=local-fs.target kubelet-dependencies.target
    After=sysinit.target 

    [Service]
    Type=oneshot
    RemainAfterExit=yes
    ExecStart=/usr/local/bin/configuration.sh

    [Install]
    RequiredBy=kubelet-dependencies.target
